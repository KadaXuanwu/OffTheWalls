// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum.Prototypes {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.CharacterStats))]
  public unsafe partial class CharacterStatsPrototype : ComponentPrototype<Quantum.CharacterStats> {
    public AssetRef<CharacterSpec> Spec;
    public FP CurrentHealth;
    public QBoolean IsRegenerating;
    public QBoolean SwitchWeaponPressedLastFrame;
    public FP MaxAmmoMultiplier;
    public FP ReloadTimeMultiplier;
    public FP AttackCooldownMultiplier;
    partial void MaterializeUser(Frame frame, ref Quantum.CharacterStats result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.CharacterStats component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.CharacterStats result, in PrototypeMaterializationContext context = default) {
        result.Spec = this.Spec;
        result.CurrentHealth = this.CurrentHealth;
        result.IsRegenerating = this.IsRegenerating;
        result.SwitchWeaponPressedLastFrame = this.SwitchWeaponPressedLastFrame;
        result.MaxAmmoMultiplier = this.MaxAmmoMultiplier;
        result.ReloadTimeMultiplier = this.ReloadTimeMultiplier;
        result.AttackCooldownMultiplier = this.AttackCooldownMultiplier;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Dashing))]
  public unsafe partial class DashingPrototype : ComponentPrototype<Quantum.Dashing> {
    public Int32 RemainingFrames;
    public FPVector2 Direction;
    partial void MaterializeUser(Frame frame, ref Quantum.Dashing result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.Dashing component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.Dashing result, in PrototypeMaterializationContext context = default) {
        result.RemainingFrames = this.RemainingFrames;
        result.Direction = this.Direction;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Input))]
  public unsafe partial class InputPrototype : StructPrototype {
    public FPVector2 Direction;
    public FPVector2 MousePosition;
    public Button Dash;
    public Button Attack;
    public Button SwitchWeapon;
    public Button ShowTrajectory;
    partial void MaterializeUser(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context = default) {
        result.Direction = this.Direction;
        result.MousePosition = this.MousePosition;
        result.Dash = this.Dash;
        result.Attack = this.Attack;
        result.SwitchWeapon = this.SwitchWeapon;
        result.ShowTrajectory = this.ShowTrajectory;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerLink))]
  public unsafe partial class PlayerLinkPrototype : ComponentPrototype<Quantum.PlayerLink> {
    public PlayerRef Player;
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerLink result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerLink component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerLink result, in PrototypeMaterializationContext context = default) {
        result.Player = this.Player;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Projectile))]
  public unsafe class ProjectilePrototype : ComponentPrototype<Quantum.Projectile> {
    public FP TTL;
    public MapEntityId Owner;
    public FP Damage;
    public AssetRef<ProjectileSpec> ProjectileType;
    public AssetRef<WeaponSpec> WeaponType;
    public FP Speed;
    public Int32 BounceCount;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.Projectile component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.Projectile result, in PrototypeMaterializationContext context = default) {
        result.TTL = this.TTL;
        PrototypeValidator.FindMapEntity(this.Owner, in context, out result.Owner);
        result.Damage = this.Damage;
        result.ProjectileType = this.ProjectileType;
        result.WeaponType = this.WeaponType;
        result.Speed = this.Speed;
        result.BounceCount = this.BounceCount;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Wall))]
  public unsafe partial class WallPrototype : ComponentPrototype<Quantum.Wall> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Quantum.Wall result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.Wall component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.Wall result, in PrototypeMaterializationContext context = default) {
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.WeaponInstance))]
  public unsafe partial class WeaponInstancePrototype : StructPrototype {
    public AssetRef<WeaponSpec> WeaponSpec;
    public Int32 CurrentAmmo;
    public FP AttackCooldownRemaining;
    public FP ReloadTimeRemaining;
    partial void MaterializeUser(Frame frame, ref Quantum.WeaponInstance result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.WeaponInstance result, in PrototypeMaterializationContext context = default) {
        result.WeaponSpec = this.WeaponSpec;
        result.CurrentAmmo = this.CurrentAmmo;
        result.AttackCooldownRemaining = this.AttackCooldownRemaining;
        result.ReloadTimeRemaining = this.ReloadTimeRemaining;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.WeaponInventory))]
  public unsafe partial class WeaponInventoryPrototype : ComponentPrototype<Quantum.WeaponInventory> {
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.WeaponInstancePrototype[] OwnedWeapons = {};
    public Quantum.Prototypes.WeaponInstancePrototype MainHandWeapon;
    public Quantum.Prototypes.WeaponInstancePrototype OffHandWeapon;
    public QBoolean IsMainHandActive;
    partial void MaterializeUser(Frame frame, ref Quantum.WeaponInventory result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.WeaponInventory component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.WeaponInventory result, in PrototypeMaterializationContext context = default) {
        if (this.OwnedWeapons.Length == 0) {
          result.OwnedWeapons = default;
        } else {
          var list = frame.AllocateList(out result.OwnedWeapons, this.OwnedWeapons.Length);
          for (int i = 0; i < this.OwnedWeapons.Length; ++i) {
            Quantum.WeaponInstance tmp = default;
            this.OwnedWeapons[i].Materialize(frame, ref tmp, in context);
            list.Add(tmp);
          }
        }
        this.MainHandWeapon.Materialize(frame, ref result.MainHandWeapon, in context);
        this.OffHandWeapon.Materialize(frame, ref result.OffHandWeapon, in context);
        result.IsMainHandActive = this.IsMainHandActive;
        MaterializeUser(frame, ref result, in context);
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
