// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.FlagsAttribute()]
  public enum InputButtons : int {
    Dash = 1 << 0,
    Attack = 1 << 1,
    SwitchWeapon = 1 << 2,
    ShowTrajectory = 1 << 3,
  }
  public static unsafe partial class FlagsExtensions {
    public static Boolean IsFlagSet(this InputButtons self, InputButtons flag) {
      return (self & flag) == flag;
    }
    public static InputButtons SetFlag(this InputButtons self, InputButtons flag) {
      return self | flag;
    }
    public static InputButtons ClearFlag(this InputButtons self, InputButtons flag) {
      return self & ~flag;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet128 {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[2];
    public const Int32 BitsSize = 128;
    public readonly Int32 Length {
      get {
        return 128;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet128*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 128, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet128 FromArray(UInt64[] values) {
      Assert.Always(2 == values.Length, "Invalid array size", values.Length);
      BitSet128 result = default;
      for (int i = 0; i < 2; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 16);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Int32 GetSetCount() {
      fixed (UInt64* p = Bits) {
        int result = 0;
        result += Maths.CountSetBits(p[0]);
        result += Maths.CountSetBits(p[1]);
        return result;
      }
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Boolean IsAnySet() {
      fixed (UInt64* p = Bits) {
        if (p[0] != 0) return true;
        if (p[1] != 0) return true;
        return false;
      }
    }
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 4463;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 2);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet128*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 2);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet2048 {
    public const Int32 SIZE = 256;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[32];
    public const Int32 BitsSize = 2048;
    public readonly Int32 Length {
      get {
        return 2048;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet2048*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 2048, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet2048 FromArray(UInt64[] values) {
      Assert.Always(32 == values.Length, "Invalid array size", values.Length);
      BitSet2048 result = default;
      for (int i = 0; i < 32; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 256);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Int32 GetSetCount() {
      fixed (UInt64* p = Bits) {
        int result = 0;
        for (int i = 0; i < 32; ++i) {
          result += Maths.CountSetBits(p[i]);
        }
        return result;
      }
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Boolean IsAnySet() {
      fixed (UInt64* p = Bits) {
        for (int i = 0; i < 32; ++i) {
          if (p[i] != 0) return true;
        }
        return false;
      }
    }
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 3319;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 32);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet2048*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet256 {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[4];
    public const Int32 BitsSize = 256;
    public readonly Int32 Length {
      get {
        return 256;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet256*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 256, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet256 FromArray(UInt64[] values) {
      Assert.Always(4 == values.Length, "Invalid array size", values.Length);
      BitSet256 result = default;
      for (int i = 0; i < 4; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 32);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Int32 GetSetCount() {
      fixed (UInt64* p = Bits) {
        int result = 0;
        result += Maths.CountSetBits(p[0]);
        result += Maths.CountSetBits(p[1]);
        result += Maths.CountSetBits(p[2]);
        result += Maths.CountSetBits(p[3]);
        return result;
      }
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Boolean IsAnySet() {
      fixed (UInt64* p = Bits) {
        if (p[0] != 0) return true;
        if (p[1] != 0) return true;
        if (p[2] != 0) return true;
        if (p[3] != 0) return true;
        return false;
      }
    }
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 14057;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 4);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet256*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 4);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet4096 {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[64];
    public const Int32 BitsSize = 4096;
    public readonly Int32 Length {
      get {
        return 4096;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet4096*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 4096, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet4096 FromArray(UInt64[] values) {
      Assert.Always(64 == values.Length, "Invalid array size", values.Length);
      BitSet4096 result = default;
      for (int i = 0; i < 64; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 512);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Int32 GetSetCount() {
      fixed (UInt64* p = Bits) {
        int result = 0;
        for (int i = 0; i < 64; ++i) {
          result += Maths.CountSetBits(p[i]);
        }
        return result;
      }
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Boolean IsAnySet() {
      fixed (UInt64* p = Bits) {
        for (int i = 0; i < 64; ++i) {
          if (p[i] != 0) return true;
        }
        return false;
      }
    }
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 1433;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 64);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet4096*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 64);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet512 {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[8];
    public const Int32 BitsSize = 512;
    public readonly Int32 Length {
      get {
        return 512;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet512*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 512, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet512 FromArray(UInt64[] values) {
      Assert.Always(8 == values.Length, "Invalid array size", values.Length);
      BitSet512 result = default;
      for (int i = 0; i < 8; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 64);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Int32 GetSetCount() {
      fixed (UInt64* p = Bits) {
        int result = 0;
        for (int i = 0; i < 8; ++i) {
          result += Maths.CountSetBits(p[i]);
        }
        return result;
      }
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Boolean IsAnySet() {
      fixed (UInt64* p = Bits) {
        for (int i = 0; i < 8; ++i) {
          if (p[i] != 0) return true;
        }
        return false;
      }
    }
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 17491;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 8);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet512*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 8);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet6 {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public fixed UInt64 Bits[1];
    public const Int32 BitsSize = 6;
    public readonly Int32 Length {
      get {
        return 6;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet6*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->Bits, 6, 64, printer);
      printer.ScopeEnd();
    }
    public static BitSet6 FromArray(UInt64[] values) {
      Assert.Always(1 == values.Length, "Invalid array size", values.Length);
      BitSet6 result = default;
      for (int i = 0; i < 1; ++i) {
        result.Bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = Bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = Bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = Bits) Native.Utils.Clear(p, 8);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = Bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Int32 GetSetCount() {
      fixed (UInt64* p = Bits) {
        int result = 0;
        result += Maths.CountSetBits(p[0] & 0x3FUL);
        return result;
      }
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public readonly Boolean IsAnySet() {
      fixed (UInt64* p = Bits) {
        if ((p[0] & 0x3FUL) != 0) return true;
        return false;
      }
    }
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 13669;
        fixed (UInt64* p = Bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 1);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet6*)ptr;
        serializer.Stream.SerializeBuffer(&p->Bits[0], 1);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct DamageRecord {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public EntityRef Attacker;
    [FieldOffset(8)]
    public FP Damage;
    [FieldOffset(16)]
    public FP Timestamp;
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 21383;
        hash = hash * 31 + Attacker.GetHashCode();
        hash = hash * 31 + Damage.GetHashCode();
        hash = hash * 31 + Timestamp.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (DamageRecord*)ptr;
        EntityRef.Serialize(&p->Attacker, serializer);
        FP.Serialize(&p->Damage, serializer);
        FP.Serialize(&p->Timestamp, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct DeathInfo {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public EntityRef Victim;
    [FieldOffset(8)]
    public EntityRef Killer;
    [FieldOffset(0)]
    public AssetRef<WeaponSpec> WeaponUsed;
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 1373;
        hash = hash * 31 + Victim.GetHashCode();
        hash = hash * 31 + Killer.GetHashCode();
        hash = hash * 31 + WeaponUsed.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (DeathInfo*)ptr;
        AssetRef.Serialize(&p->WeaponUsed, serializer);
        EntityRef.Serialize(&p->Killer, serializer);
        EntityRef.Serialize(&p->Victim, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Input {
    public const Int32 SIZE = 88;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(56)]
    public FPVector2 Direction;
    [FieldOffset(72)]
    public FPVector2 MousePosition;
    [FieldOffset(16)]
    public Button Dash;
    [FieldOffset(4)]
    public Button Attack;
    [FieldOffset(40)]
    public Button SwitchWeapon;
    [FieldOffset(28)]
    public Button ShowTrajectory;
    [FieldOffset(0)]
    public Int32 SelectedUpgradeIndex;
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 19249;
        hash = hash * 31 + Direction.GetHashCode();
        hash = hash * 31 + MousePosition.GetHashCode();
        hash = hash * 31 + Dash.GetHashCode();
        hash = hash * 31 + Attack.GetHashCode();
        hash = hash * 31 + SwitchWeapon.GetHashCode();
        hash = hash * 31 + ShowTrajectory.GetHashCode();
        hash = hash * 31 + SelectedUpgradeIndex.GetHashCode();
        return hash;
      }
    }
    static partial void GetMaxCountCodeGen(ref int maxCount) {
      maxCount = 6;
    }
    public Boolean IsDown(InputButtons button) {
      switch (button) {
        case InputButtons.Dash: return Dash.IsDown;
        case InputButtons.Attack: return Attack.IsDown;
        case InputButtons.SwitchWeapon: return SwitchWeapon.IsDown;
        case InputButtons.ShowTrajectory: return ShowTrajectory.IsDown;
        default: return false;
      }
    }
    public Boolean WasPressed(InputButtons button) {
      switch (button) {
        case InputButtons.Dash: return Dash.WasPressed;
        case InputButtons.Attack: return Attack.WasPressed;
        case InputButtons.SwitchWeapon: return SwitchWeapon.WasPressed;
        case InputButtons.ShowTrajectory: return ShowTrajectory.WasPressed;
        default: return false;
      }
    }
    static partial void SerializeCodeGen(void* ptr, FrameSerializer serializer) {
        var p = (Input*)ptr;
        serializer.Stream.Serialize(&p->SelectedUpgradeIndex);
        Button.Serialize(&p->Attack, serializer);
        Button.Serialize(&p->Dash, serializer);
        Button.Serialize(&p->ShowTrajectory, serializer);
        Button.Serialize(&p->SwitchWeapon, serializer);
        FPVector2.Serialize(&p->Direction, serializer);
        FPVector2.Serialize(&p->MousePosition, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UpgradeRecord {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRef<UpgradeSpec> UpgradeSpec;
    [FieldOffset(0)]
    public Int32 StackCount;
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 16691;
        hash = hash * 31 + UpgradeSpec.GetHashCode();
        hash = hash * 31 + StackCount.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UpgradeRecord*)ptr;
        serializer.Stream.Serialize(&p->StackCount);
        AssetRef.Serialize(&p->UpgradeSpec, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct WeaponInstance {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRef<WeaponSpec> WeaponSpec;
    [FieldOffset(0)]
    public Int32 CurrentAmmo;
    [FieldOffset(16)]
    public FP AttackCooldownRemaining;
    [FieldOffset(24)]
    public FP ReloadTimeRemaining;
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 191;
        hash = hash * 31 + WeaponSpec.GetHashCode();
        hash = hash * 31 + CurrentAmmo.GetHashCode();
        hash = hash * 31 + AttackCooldownRemaining.GetHashCode();
        hash = hash * 31 + ReloadTimeRemaining.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (WeaponInstance*)ptr;
        serializer.Stream.Serialize(&p->CurrentAmmo);
        AssetRef.Serialize(&p->WeaponSpec, serializer);
        FP.Serialize(&p->AttackCooldownRemaining, serializer);
        FP.Serialize(&p->ReloadTimeRemaining, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct _globals_ {
    public const Int32 SIZE = 1144;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRef<Map> Map;
    [FieldOffset(8)]
    public FP DeltaTime;
    [FieldOffset(16)]
    public NavMeshRegionMask NavMeshRegions;
    [FieldOffset(80)]
    public PhysicsEngineState PhysicsState2D;
    [FieldOffset(96)]
    public PhysicsEngineState PhysicsState3D;
    [FieldOffset(112)]
    public RNGSession RngSession;
    [FieldOffset(128)]
    public FrameMetaData FrameMetaData;
    [FieldOffset(176)]
    public BitSet1024 Systems;
    [FieldOffset(304)]
    public PhysicsSceneSettings PhysicsSettings;
    [FieldOffset(600)]
    public Int32 PlayerConnectedCount;
    [FieldOffset(608)]
    [FramePrinter.FixedArrayAttribute(typeof(Input), 6)]
    private fixed Byte _input_[528];
    [FieldOffset(1136)]
    public BitSet6 PlayerLastConnectionState;
    public readonly FixedArray<Input> input {
      get {
        fixed (byte* p = _input_) { return new FixedArray<Input>(p, 88, 6); }
      }
    }
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 12473;
        hash = hash * 31 + Map.GetHashCode();
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + NavMeshRegions.GetHashCode();
        hash = hash * 31 + PhysicsState2D.GetHashCode();
        hash = hash * 31 + PhysicsState3D.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + FrameMetaData.GetHashCode();
        hash = hash * 31 + Systems.GetHashCode();
        hash = hash * 31 + PhysicsSettings.GetHashCode();
        hash = hash * 31 + PlayerConnectedCount.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(input);
        hash = hash * 31 + PlayerLastConnectionState.GetHashCode();
        return hash;
      }
    }
    static partial void SerializeCodeGen(void* ptr, FrameSerializer serializer) {
        var p = (_globals_*)ptr;
        AssetRef.Serialize(&p->Map, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        NavMeshRegionMask.Serialize(&p->NavMeshRegions, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState2D, serializer);
        PhysicsEngineState.Serialize(&p->PhysicsState3D, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
        FrameMetaData.Serialize(&p->FrameMetaData, serializer);
        Quantum.BitSet1024.Serialize(&p->Systems, serializer);
        PhysicsSceneSettings.Serialize(&p->PhysicsSettings, serializer);
        serializer.Stream.Serialize(&p->PlayerConnectedCount);
        FixedArray.Serialize(p->input, serializer, Statics.SerializeInput);
        Quantum.BitSet6.Serialize(&p->PlayerLastConnectionState, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct CharacterStats : Quantum.IComponent {
    public const Int32 SIZE = 104;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public AssetRef<CharacterSpec> Spec;
    [FieldOffset(48)]
    public FP CurrentHealth;
    [FieldOffset(4)]
    public QBoolean IsRegenerating;
    [FieldOffset(8)]
    public QBoolean SwitchWeaponPressedLastFrame;
    [FieldOffset(64)]
    public FP DashCooldownRemaining;
    [FieldOffset(72)]
    public FP MaxAmmoMultiplier;
    [FieldOffset(96)]
    public FP ReloadTimeMultiplier;
    [FieldOffset(24)]
    public FP AttackCooldownMultiplier;
    [FieldOffset(88)]
    public FP MoveSpeedMultiplier;
    [FieldOffset(56)]
    public FP DamageMultiplier;
    [FieldOffset(80)]
    public FP MaxHealthMultiplier;
    [FieldOffset(40)]
    public FP BulletSpeedMultiplier;
    [FieldOffset(32)]
    public FP BounceDamageIncreaseMultiplier;
    [FieldOffset(0)]
    public Int32 AdditionalBulletBounces;
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 18671;
        hash = hash * 31 + Spec.GetHashCode();
        hash = hash * 31 + CurrentHealth.GetHashCode();
        hash = hash * 31 + IsRegenerating.GetHashCode();
        hash = hash * 31 + SwitchWeaponPressedLastFrame.GetHashCode();
        hash = hash * 31 + DashCooldownRemaining.GetHashCode();
        hash = hash * 31 + MaxAmmoMultiplier.GetHashCode();
        hash = hash * 31 + ReloadTimeMultiplier.GetHashCode();
        hash = hash * 31 + AttackCooldownMultiplier.GetHashCode();
        hash = hash * 31 + MoveSpeedMultiplier.GetHashCode();
        hash = hash * 31 + DamageMultiplier.GetHashCode();
        hash = hash * 31 + MaxHealthMultiplier.GetHashCode();
        hash = hash * 31 + BulletSpeedMultiplier.GetHashCode();
        hash = hash * 31 + BounceDamageIncreaseMultiplier.GetHashCode();
        hash = hash * 31 + AdditionalBulletBounces.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (CharacterStats*)ptr;
        serializer.Stream.Serialize(&p->AdditionalBulletBounces);
        QBoolean.Serialize(&p->IsRegenerating, serializer);
        QBoolean.Serialize(&p->SwitchWeaponPressedLastFrame, serializer);
        AssetRef.Serialize(&p->Spec, serializer);
        FP.Serialize(&p->AttackCooldownMultiplier, serializer);
        FP.Serialize(&p->BounceDamageIncreaseMultiplier, serializer);
        FP.Serialize(&p->BulletSpeedMultiplier, serializer);
        FP.Serialize(&p->CurrentHealth, serializer);
        FP.Serialize(&p->DamageMultiplier, serializer);
        FP.Serialize(&p->DashCooldownRemaining, serializer);
        FP.Serialize(&p->MaxAmmoMultiplier, serializer);
        FP.Serialize(&p->MaxHealthMultiplier, serializer);
        FP.Serialize(&p->MoveSpeedMultiplier, serializer);
        FP.Serialize(&p->ReloadTimeMultiplier, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct DamageTracker : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public QListPtr<DamageRecord> RecentDamage;
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 13337;
        hash = hash * 31 + RecentDamage.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      RecentDamage = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.DamageTracker*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (DamageTracker*)ptr;
        QList.Serialize(&p->RecentDamage, serializer, Statics.SerializeDamageRecord);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Dashing : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public Int32 RemainingFrames;
    [FieldOffset(8)]
    public FPVector2 Direction;
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 8573;
        hash = hash * 31 + RemainingFrames.GetHashCode();
        hash = hash * 31 + Direction.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Dashing*)ptr;
        serializer.Stream.Serialize(&p->RemainingFrames);
        FPVector2.Serialize(&p->Direction, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerLink : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public PlayerRef Player;
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 21391;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerLink*)ptr;
        PlayerRef.Serialize(&p->Player, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerStats : Quantum.IComponent {
    public const Int32 SIZE = 12;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(8)]
    public Int32 Kills;
    [FieldOffset(4)]
    public Int32 Deaths;
    [FieldOffset(0)]
    public Int32 Assists;
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 14797;
        hash = hash * 31 + Kills.GetHashCode();
        hash = hash * 31 + Deaths.GetHashCode();
        hash = hash * 31 + Assists.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerStats*)ptr;
        serializer.Stream.Serialize(&p->Assists);
        serializer.Stream.Serialize(&p->Deaths);
        serializer.Stream.Serialize(&p->Kills);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerUpgrades : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(12)]
    public QListPtr<UpgradeRecord> OwnedUpgrades;
    [FieldOffset(8)]
    public QListPtr<AssetRef<UpgradeSpec>> CurrentOffers;
    [FieldOffset(0)]
    public QBoolean HasPendingOffers;
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 3209;
        hash = hash * 31 + OwnedUpgrades.GetHashCode();
        hash = hash * 31 + CurrentOffers.GetHashCode();
        hash = hash * 31 + HasPendingOffers.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      OwnedUpgrades = default;
      CurrentOffers = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.PlayerUpgrades*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerUpgrades*)ptr;
        QBoolean.Serialize(&p->HasPendingOffers, serializer);
        QList.Serialize(&p->CurrentOffers, serializer, Statics.SerializeAssetRef);
        QList.Serialize(&p->OwnedUpgrades, serializer, Statics.SerializeUpgradeRecord);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Projectile : Quantum.IComponent {
    public const Int32 SIZE = 56;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(48)]
    public FP TTL;
    [FieldOffset(24)]
    public EntityRef Owner;
    [FieldOffset(32)]
    public FP Damage;
    [FieldOffset(8)]
    public AssetRef<ProjectileSpec> ProjectileType;
    [FieldOffset(16)]
    public AssetRef<WeaponSpec> WeaponType;
    [FieldOffset(40)]
    public FP Speed;
    [FieldOffset(0)]
    public Int32 BounceCount;
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 16141;
        hash = hash * 31 + TTL.GetHashCode();
        hash = hash * 31 + Owner.GetHashCode();
        hash = hash * 31 + Damage.GetHashCode();
        hash = hash * 31 + ProjectileType.GetHashCode();
        hash = hash * 31 + WeaponType.GetHashCode();
        hash = hash * 31 + Speed.GetHashCode();
        hash = hash * 31 + BounceCount.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Projectile*)ptr;
        serializer.Stream.Serialize(&p->BounceCount);
        AssetRef.Serialize(&p->ProjectileType, serializer);
        AssetRef.Serialize(&p->WeaponType, serializer);
        EntityRef.Serialize(&p->Owner, serializer);
        FP.Serialize(&p->Damage, serializer);
        FP.Serialize(&p->Speed, serializer);
        FP.Serialize(&p->TTL, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct RespawnTimer : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP TimeRemaining;
    [FieldOffset(8)]
    public FP TotalRespawnTime;
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 13591;
        hash = hash * 31 + TimeRemaining.GetHashCode();
        hash = hash * 31 + TotalRespawnTime.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (RespawnTimer*)ptr;
        FP.Serialize(&p->TimeRemaining, serializer);
        FP.Serialize(&p->TotalRespawnTime, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Wall : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 89;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Wall*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct WeaponInventory : Quantum.IComponent {
    public const Int32 SIZE = 72;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(4)]
    public QListPtr<WeaponInstance> OwnedWeapons;
    [FieldOffset(8)]
    public WeaponInstance MainHandWeapon;
    [FieldOffset(40)]
    public WeaponInstance OffHandWeapon;
    [FieldOffset(0)]
    public QBoolean IsMainHandActive;
    public override readonly Int32 GetHashCode() {
      unchecked { 
        var hash = 4513;
        hash = hash * 31 + OwnedWeapons.GetHashCode();
        hash = hash * 31 + MainHandWeapon.GetHashCode();
        hash = hash * 31 + OffHandWeapon.GetHashCode();
        hash = hash * 31 + IsMainHandActive.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(FrameBase f, EntityRef entity) {
      OwnedWeapons = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Quantum.WeaponInventory*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (WeaponInventory*)ptr;
        QBoolean.Serialize(&p->IsMainHandActive, serializer);
        QList.Serialize(&p->OwnedWeapons, serializer, Statics.SerializeWeaponInstance);
        Quantum.WeaponInstance.Serialize(&p->MainHandWeapon, serializer);
        Quantum.WeaponInstance.Serialize(&p->OffHandWeapon, serializer);
    }
  }
  public unsafe partial interface ISignalCharacterShoot : ISignal {
    void CharacterShoot(Frame f, EntityRef owner);
  }
  public unsafe partial interface ISignalSwitchWeapon : ISignal {
    void SwitchWeapon(Frame f, EntityRef entity, Int32 weaponIndex);
  }
  public unsafe partial interface ISignalReloadWeapon : ISignal {
    void ReloadWeapon(Frame f, EntityRef entity);
  }
  public unsafe partial interface ISignalOnPlayerDeath : ISignal {
    void OnPlayerDeath(Frame f, DeathInfo deathInfo);
  }
  public unsafe partial interface ISignalOnPlayerRespawn : ISignal {
    void OnPlayerRespawn(Frame f, EntityRef player);
  }
  public unsafe partial interface ISignalOnUpgradeSelected : ISignal {
    void OnUpgradeSelected(Frame f, EntityRef player, AssetRef<UpgradeSpec> upgradeSpec);
  }
  public unsafe partial interface ISignalOnUpgradeOffered : ISignal {
    void OnUpgradeOffered(Frame f, EntityRef player, QListPtr<AssetRef<UpgradeSpec>> offeredUpgrades);
  }
  public static unsafe partial class Constants {
  }
  public unsafe partial class Frame {
    private ISignalCharacterShoot[] _ISignalCharacterShootSystems;
    private ISignalSwitchWeapon[] _ISignalSwitchWeaponSystems;
    private ISignalReloadWeapon[] _ISignalReloadWeaponSystems;
    private ISignalOnPlayerDeath[] _ISignalOnPlayerDeathSystems;
    private ISignalOnPlayerRespawn[] _ISignalOnPlayerRespawnSystems;
    private ISignalOnUpgradeSelected[] _ISignalOnUpgradeSelectedSystems;
    private ISignalOnUpgradeOffered[] _ISignalOnUpgradeOfferedSystems;
    partial void AllocGen() {
      _globals = (_globals_*)Context.Allocator.AllocAndClear(sizeof(_globals_));
    }
    partial void FreeGen() {
      Context.Allocator.Free(_globals);
    }
    partial void CopyFromGen(Frame frame) {
      Native.Utils.Copy(_globals, frame._globals, sizeof(_globals_));
    }
    partial void InitGen() {
      Initialize(this, this.SimulationConfig.Entities, 256);
      _ISignalCharacterShootSystems = BuildSignalsArray<ISignalCharacterShoot>();
      _ISignalSwitchWeaponSystems = BuildSignalsArray<ISignalSwitchWeapon>();
      _ISignalReloadWeaponSystems = BuildSignalsArray<ISignalReloadWeapon>();
      _ISignalOnPlayerDeathSystems = BuildSignalsArray<ISignalOnPlayerDeath>();
      _ISignalOnPlayerRespawnSystems = BuildSignalsArray<ISignalOnPlayerRespawn>();
      _ISignalOnUpgradeSelectedSystems = BuildSignalsArray<ISignalOnUpgradeSelected>();
      _ISignalOnUpgradeOfferedSystems = BuildSignalsArray<ISignalOnUpgradeOffered>();
      _ComponentSignalsOnAdded = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      _ComponentSignalsOnRemoved = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      BuildSignalsArrayOnComponentAdded<CharacterController2D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController2D>();
      BuildSignalsArrayOnComponentAdded<CharacterController3D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.CharacterStats>();
      BuildSignalsArrayOnComponentRemoved<Quantum.CharacterStats>();
      BuildSignalsArrayOnComponentAdded<Quantum.DamageTracker>();
      BuildSignalsArrayOnComponentRemoved<Quantum.DamageTracker>();
      BuildSignalsArrayOnComponentAdded<Quantum.Dashing>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Dashing>();
      BuildSignalsArrayOnComponentAdded<MapEntityLink>();
      BuildSignalsArrayOnComponentRemoved<MapEntityLink>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentAdded<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentRemoved<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentAdded<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCallbacks2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCallbacks2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCallbacks3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCallbacks3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsJoints2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsJoints2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsJoints3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsJoints3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerLink>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerLink>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerStats>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerStats>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerUpgrades>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerUpgrades>();
      BuildSignalsArrayOnComponentAdded<Quantum.Projectile>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Projectile>();
      BuildSignalsArrayOnComponentAdded<Quantum.RespawnTimer>();
      BuildSignalsArrayOnComponentRemoved<Quantum.RespawnTimer>();
      BuildSignalsArrayOnComponentAdded<Transform2D>();
      BuildSignalsArrayOnComponentRemoved<Transform2D>();
      BuildSignalsArrayOnComponentAdded<Transform2DVertical>();
      BuildSignalsArrayOnComponentRemoved<Transform2DVertical>();
      BuildSignalsArrayOnComponentAdded<Transform3D>();
      BuildSignalsArrayOnComponentRemoved<Transform3D>();
      BuildSignalsArrayOnComponentAdded<View>();
      BuildSignalsArrayOnComponentRemoved<View>();
      BuildSignalsArrayOnComponentAdded<Quantum.Wall>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Wall>();
      BuildSignalsArrayOnComponentAdded<Quantum.WeaponInventory>();
      BuildSignalsArrayOnComponentRemoved<Quantum.WeaponInventory>();
    }
    partial void SetPlayerInputCodeGen(PlayerRef player, Input input) {
      if ((int)player >= (int)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      var i = _globals->input.GetPointer(player);
      i->Direction = input.Direction;
      i->MousePosition = input.MousePosition;
      i->Dash = i->Dash.Update(this.Number, input.Dash);
      i->Attack = i->Attack.Update(this.Number, input.Attack);
      i->SwitchWeapon = i->SwitchWeapon.Update(this.Number, input.SwitchWeapon);
      i->ShowTrajectory = i->ShowTrajectory.Update(this.Number, input.ShowTrajectory);
      i->SelectedUpgradeIndex = input.SelectedUpgradeIndex;
    }
    public Input* GetPlayerInput(PlayerRef player) {
      if ((int)player >= (int)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      return _globals->input.GetPointer(player);
    }
    partial void GetPlayerLastConnectionStateCodeGen(ref BitSetRef bitSet) {
      bitSet = new(_globals->PlayerLastConnectionState.Bits, _globals->PlayerLastConnectionState.Length);
    }
    partial void ResetPhysicsCodeGen() {
      Physics2D.Init(_globals->PhysicsState2D.MapStaticCollidersState.TrackedMap);
      Physics3D.Init(_globals->PhysicsState3D.MapStaticCollidersState.TrackedMap);
    }
    public unsafe partial struct FrameSignals {
      public void CharacterShoot(EntityRef owner) {
        var array = _f._ISignalCharacterShootSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.CharacterShoot(_f, owner);
          }
        }
      }
      public void SwitchWeapon(EntityRef entity, Int32 weaponIndex) {
        var array = _f._ISignalSwitchWeaponSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.SwitchWeapon(_f, entity, weaponIndex);
          }
        }
      }
      public void ReloadWeapon(EntityRef entity) {
        var array = _f._ISignalReloadWeaponSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.ReloadWeapon(_f, entity);
          }
        }
      }
      public void OnPlayerDeath(DeathInfo deathInfo) {
        var array = _f._ISignalOnPlayerDeathSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnPlayerDeath(_f, deathInfo);
          }
        }
      }
      public void OnPlayerRespawn(EntityRef player) {
        var array = _f._ISignalOnPlayerRespawnSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnPlayerRespawn(_f, player);
          }
        }
      }
      public void OnUpgradeSelected(EntityRef player, AssetRef<UpgradeSpec> upgradeSpec) {
        var array = _f._ISignalOnUpgradeSelectedSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnUpgradeSelected(_f, player, upgradeSpec);
          }
        }
      }
      public void OnUpgradeOffered(EntityRef player, QListPtr<AssetRef<UpgradeSpec>> offeredUpgrades) {
        var array = _f._ISignalOnUpgradeOfferedSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnUpgradeOffered(_f, player, offeredUpgrades);
          }
        }
      }
    }
  }
  public unsafe partial class Statics {
    public static FrameSerializer.Delegate SerializeDamageRecord;
    public static FrameSerializer.Delegate SerializeAssetRef;
    public static FrameSerializer.Delegate SerializeUpgradeRecord;
    public static FrameSerializer.Delegate SerializeWeaponInstance;
    public static FrameSerializer.Delegate SerializeInput;
    static partial void InitStaticDelegatesGen() {
      SerializeDamageRecord = Quantum.DamageRecord.Serialize;
      SerializeAssetRef = AssetRef.Serialize;
      SerializeUpgradeRecord = Quantum.UpgradeRecord.Serialize;
      SerializeWeaponInstance = Quantum.WeaponInstance.Serialize;
      SerializeInput = Quantum.Input.Serialize;
    }
    static partial void RegisterSimulationTypesGen(TypeRegistry typeRegistry) {
      typeRegistry.Register(typeof(AssetGuid), AssetGuid.SIZE);
      typeRegistry.Register(typeof(AssetRef), AssetRef.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet1024), Quantum.BitSet1024.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet128), Quantum.BitSet128.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet2048), Quantum.BitSet2048.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet256), Quantum.BitSet256.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet4096), Quantum.BitSet4096.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet512), Quantum.BitSet512.SIZE);
      typeRegistry.Register(typeof(Quantum.BitSet6), Quantum.BitSet6.SIZE);
      typeRegistry.Register(typeof(Button), Button.SIZE);
      typeRegistry.Register(typeof(CallbackFlags), 4);
      typeRegistry.Register(typeof(CharacterController2D), CharacterController2D.SIZE);
      typeRegistry.Register(typeof(CharacterController3D), CharacterController3D.SIZE);
      typeRegistry.Register(typeof(Quantum.CharacterStats), Quantum.CharacterStats.SIZE);
      typeRegistry.Register(typeof(ColorRGBA), ColorRGBA.SIZE);
      typeRegistry.Register(typeof(ComponentPrototypeRef), ComponentPrototypeRef.SIZE);
      typeRegistry.Register(typeof(ComponentTypeRef), ComponentTypeRef.SIZE);
      typeRegistry.Register(typeof(Quantum.DamageRecord), Quantum.DamageRecord.SIZE);
      typeRegistry.Register(typeof(Quantum.DamageTracker), Quantum.DamageTracker.SIZE);
      typeRegistry.Register(typeof(Quantum.Dashing), Quantum.Dashing.SIZE);
      typeRegistry.Register(typeof(Quantum.DeathInfo), Quantum.DeathInfo.SIZE);
      typeRegistry.Register(typeof(DistanceJoint), DistanceJoint.SIZE);
      typeRegistry.Register(typeof(DistanceJoint3D), DistanceJoint3D.SIZE);
      typeRegistry.Register(typeof(EntityPrototypeRef), EntityPrototypeRef.SIZE);
      typeRegistry.Register(typeof(EntityRef), EntityRef.SIZE);
      typeRegistry.Register(typeof(FP), FP.SIZE);
      typeRegistry.Register(typeof(FPBounds2), FPBounds2.SIZE);
      typeRegistry.Register(typeof(FPBounds3), FPBounds3.SIZE);
      typeRegistry.Register(typeof(FPMatrix2x2), FPMatrix2x2.SIZE);
      typeRegistry.Register(typeof(FPMatrix3x3), FPMatrix3x3.SIZE);
      typeRegistry.Register(typeof(FPMatrix4x4), FPMatrix4x4.SIZE);
      typeRegistry.Register(typeof(FPQuaternion), FPQuaternion.SIZE);
      typeRegistry.Register(typeof(FPVector2), FPVector2.SIZE);
      typeRegistry.Register(typeof(FPVector3), FPVector3.SIZE);
      typeRegistry.Register(typeof(FrameMetaData), FrameMetaData.SIZE);
      typeRegistry.Register(typeof(FrameTimer), FrameTimer.SIZE);
      typeRegistry.Register(typeof(HingeJoint), HingeJoint.SIZE);
      typeRegistry.Register(typeof(HingeJoint3D), HingeJoint3D.SIZE);
      typeRegistry.Register(typeof(Hit), Hit.SIZE);
      typeRegistry.Register(typeof(Hit3D), Hit3D.SIZE);
      typeRegistry.Register(typeof(Quantum.Input), Quantum.Input.SIZE);
      typeRegistry.Register(typeof(Quantum.InputButtons), 4);
      typeRegistry.Register(typeof(InputDirection), InputDirection.SIZE);
      typeRegistry.Register(typeof(InputDirectionMagnitude), InputDirectionMagnitude.SIZE);
      typeRegistry.Register(typeof(InputPitchYaw), InputPitchYaw.SIZE);
      typeRegistry.Register(typeof(IntVector2), IntVector2.SIZE);
      typeRegistry.Register(typeof(IntVector3), IntVector3.SIZE);
      typeRegistry.Register(typeof(Joint), Joint.SIZE);
      typeRegistry.Register(typeof(Joint3D), Joint3D.SIZE);
      typeRegistry.Register(typeof(LayerMask), LayerMask.SIZE);
      typeRegistry.Register(typeof(MapEntityId), MapEntityId.SIZE);
      typeRegistry.Register(typeof(MapEntityLink), MapEntityLink.SIZE);
      typeRegistry.Register(typeof(NavMeshAvoidanceAgent), NavMeshAvoidanceAgent.SIZE);
      typeRegistry.Register(typeof(NavMeshAvoidanceObstacle), NavMeshAvoidanceObstacle.SIZE);
      typeRegistry.Register(typeof(NavMeshPathfinder), NavMeshPathfinder.SIZE);
      typeRegistry.Register(typeof(NavMeshRegionMask), NavMeshRegionMask.SIZE);
      typeRegistry.Register(typeof(NavMeshSteeringAgent), NavMeshSteeringAgent.SIZE);
      typeRegistry.Register(typeof(NullableFP), NullableFP.SIZE);
      typeRegistry.Register(typeof(NullableFPVector2), NullableFPVector2.SIZE);
      typeRegistry.Register(typeof(NullableFPVector3), NullableFPVector3.SIZE);
      typeRegistry.Register(typeof(NullableNonNegativeFP), NullableNonNegativeFP.SIZE);
      typeRegistry.Register(typeof(PhysicsBody2D), PhysicsBody2D.SIZE);
      typeRegistry.Register(typeof(PhysicsBody3D), PhysicsBody3D.SIZE);
      typeRegistry.Register(typeof(PhysicsCallbacks2D), PhysicsCallbacks2D.SIZE);
      typeRegistry.Register(typeof(PhysicsCallbacks3D), PhysicsCallbacks3D.SIZE);
      typeRegistry.Register(typeof(PhysicsCollider2D), PhysicsCollider2D.SIZE);
      typeRegistry.Register(typeof(PhysicsCollider3D), PhysicsCollider3D.SIZE);
      typeRegistry.Register(typeof(PhysicsEngineState), PhysicsEngineState.SIZE);
      typeRegistry.Register(typeof(PhysicsJoints2D), PhysicsJoints2D.SIZE);
      typeRegistry.Register(typeof(PhysicsJoints3D), PhysicsJoints3D.SIZE);
      typeRegistry.Register(typeof(PhysicsQueryRef), PhysicsQueryRef.SIZE);
      typeRegistry.Register(typeof(PhysicsSceneSettings), PhysicsSceneSettings.SIZE);
      typeRegistry.Register(typeof(Quantum.PlayerLink), Quantum.PlayerLink.SIZE);
      typeRegistry.Register(typeof(PlayerRef), PlayerRef.SIZE);
      typeRegistry.Register(typeof(Quantum.PlayerStats), Quantum.PlayerStats.SIZE);
      typeRegistry.Register(typeof(Quantum.PlayerUpgrades), Quantum.PlayerUpgrades.SIZE);
      typeRegistry.Register(typeof(Quantum.Projectile), Quantum.Projectile.SIZE);
      typeRegistry.Register(typeof(Ptr), Ptr.SIZE);
      typeRegistry.Register(typeof(QBoolean), QBoolean.SIZE);
      typeRegistry.Register(typeof(Quantum.Ptr), Quantum.Ptr.SIZE);
      typeRegistry.Register(typeof(QueryOptions), 2);
      typeRegistry.Register(typeof(RNGSession), RNGSession.SIZE);
      typeRegistry.Register(typeof(Quantum.RespawnTimer), Quantum.RespawnTimer.SIZE);
      typeRegistry.Register(typeof(Shape2D), Shape2D.SIZE);
      typeRegistry.Register(typeof(Shape3D), Shape3D.SIZE);
      typeRegistry.Register(typeof(SpringJoint), SpringJoint.SIZE);
      typeRegistry.Register(typeof(SpringJoint3D), SpringJoint3D.SIZE);
      typeRegistry.Register(typeof(Transform2D), Transform2D.SIZE);
      typeRegistry.Register(typeof(Transform2DVertical), Transform2DVertical.SIZE);
      typeRegistry.Register(typeof(Transform3D), Transform3D.SIZE);
      typeRegistry.Register(typeof(Quantum.UpgradeRecord), Quantum.UpgradeRecord.SIZE);
      typeRegistry.Register(typeof(View), View.SIZE);
      typeRegistry.Register(typeof(Quantum.Wall), Quantum.Wall.SIZE);
      typeRegistry.Register(typeof(Quantum.WeaponInstance), Quantum.WeaponInstance.SIZE);
      typeRegistry.Register(typeof(Quantum.WeaponInventory), Quantum.WeaponInventory.SIZE);
      typeRegistry.Register(typeof(Quantum._globals_), Quantum._globals_.SIZE);
    }
    static partial void InitComponentTypeIdGen() {
      ComponentTypeId.Reset(ComponentTypeId.BuiltInComponentCount + 10)
        .AddBuiltInComponents()
        .Add<Quantum.CharacterStats>(Quantum.CharacterStats.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.DamageTracker>(Quantum.DamageTracker.Serialize, null, Quantum.DamageTracker.OnRemoved, ComponentFlags.None)
        .Add<Quantum.Dashing>(Quantum.Dashing.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.PlayerLink>(Quantum.PlayerLink.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.PlayerStats>(Quantum.PlayerStats.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.PlayerUpgrades>(Quantum.PlayerUpgrades.Serialize, null, Quantum.PlayerUpgrades.OnRemoved, ComponentFlags.None)
        .Add<Quantum.Projectile>(Quantum.Projectile.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.RespawnTimer>(Quantum.RespawnTimer.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.Wall>(Quantum.Wall.Serialize, null, null, ComponentFlags.None)
        .Add<Quantum.WeaponInventory>(Quantum.WeaponInventory.Serialize, null, Quantum.WeaponInventory.OnRemoved, ComponentFlags.None)
        .Finish();
    }
    [Preserve()]
    public static void EnsureNotStrippedGen() {
      FramePrinter.EnsureNotStripped();
      FramePrinter.EnsurePrimitiveNotStripped<CallbackFlags>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputButtons>();
      FramePrinter.EnsurePrimitiveNotStripped<QueryOptions>();
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
